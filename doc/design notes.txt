Copyright (C) Eelco Vriezekolk, Universiteit Twente, Agentschap Telecom.
See LICENSE.md


In general, when object A has some B's, then the action will be in A to add a B, not on B to attach it to A. This applies to
-Components having Nodes,
-NodeClusters having Components,
-Projects having Services,
-Services having nodes.
-Projects having checklistitems.
The reverse, removing a B from an A, is the responsibility of B. Typically, when a B is destroyed, it will remove itself from its A.
==> Not always the case, e.g. Component.removenode()

With the transition towards transactions with undo/redo, the code for setting properties on objects needs to be rearranged as well.
Perhaps: use change<property> for methods that start a transaction, and set<property> for methods that immediately affect the object?


Actions (this section is outdated, needs update based on Transactions)
~~~~~~~
The following are atomic user-interface actions.

Node(s):
x- create(type,id,service)	[workspacedrophandler:]
x- connect					[Node.try_attach_center:]
x- duplicate				[initTabDiagrams: $('#mi_du').mouseup]
x- destroy(effect)			[initTabDiagrams: $('#mi_de').mouseup]
x- destroy selection		[initTabDiagrams: $('#mi_sd').mouseup]
x- changeType(type)			[initTabDiagrams: $('#mi_cttWLS').mouseup and 4 others]
x- rename(title)				[Node.paint: $('#titlemain'+this.id).editInPlace callback]
x- move single node			[Node.paint: $(this.jnid).draggable stop handler]
x- resize single node		[Node.pain:t $("#node"+this.id).resizable stop handler]
x- move selection			[Service.paintall: $('#selectrect').draggable stop handler]
x- move all nodes			[Node.paint: $(this.jnid).draggable]

Component:
x- class to single/mult.	[initTabDiagrams: $('#mi_sm').mouseup]
x- rename vuln				[ThreatAssessment.addtablerow_behavioronly: $("#dth_"+prefix+"name"+this.id).editInPlace callback]
x- setFrequency(vuln,freq)	[ThreatAssessment.addtablerow_behavioronly: $("#dth_"+prefix+"freq"+this.id).editInPlace callback]
x- setImpact(vuln,impact)	[ThreatAssessment.addtablerow_behavioronly: $("#dth_"+prefix+"impact"+this.id).editInPlace callback]
x- setRemark(vuln,remark)	[ThreatAssessment.addtablerow_behavioronly: $("#dth_"+prefix+"remark"+this.id).editInPlace callback]
x- paste					[displayComponentThreatAssessmentsDialog: $('#dthpastedia'+cid).click handler]
x- paste					[paintSingleFailures: function pastehandler]
x- removeVuln(vuln)			[ThreatAssessment.addtablerow_behavioronly: $("#dth_"+prefix+"del"+this.id).click]
x- addVuln					[displayComponentThreatAssessmentsDialog: $('#dthadddia'+cid).click handler]
x- addVuln					[paintSingleFailures: function addhandler]

NodeCluster:
- move node or cluster		[nodeClusterReorder: ("Create cluster", "Move node from cluster", "Remove cluster", "Move cluster")]
- rename cluster			[reallyRepaintCluster: $('.litext').editInPlace callback]
- set frequency				[as for Component]
- set impact				[as for Component]
- set remark				[as for Component]
Any change could cause clusters to be deleted and nodes to be moved, because of normalisation.

Project:
x- create(id)				[initLibraryPanel: $('#buttadd').click]
x- create(id)				[initLibraryPanel: $('#buttimport').click]
x- rename					[initLibraryPanel: $('#libprops').click "Change properties" button callback]
- destroy()					[initLibraryPanel: $('#buttdel').click]
x- share/make private		[initLibraryPanel: $('#libprops').click "Change properties" button callback]
x- edit labels				[showLabelEditForm]

ChecklistItems (Vulnerability)
x- add						[initTabDiagrams: function addhandler]
x- remove					[Vulnerability.addtablerow: $('#thdel'+this.id).click callback]
x- rename					[Vulnerability.addtablerow: $('#thname'+this.id).editInPlace callback]
x- change description 		[Vulnerability.addtablerow: $('#thdesc'+this.id).editInPlace callback]
x- paste					[initTabDiagrams: function pastehandler]

Service:
x- addService(service)		[initTabDiagrams: $('#servaddbuttondia').click]
x- addService(service)		[initTabSingleFs: $('#servaddbuttonsf').click]
x- destroy()				[bottomTabsCloseHandler:]
x- rename(title)			[diagramTabEditStart: "Change name" button callback]

Other:
Zap Library is not a UI action that changes a project.



January 2020
~~~~~~~~~~~~
Instead of sequential keys starting from 1, use 128 bit random keys (UUID).
This will, in practice, guarantee unique keys even across browsers/client computers.
No checks on uniqueness of keys is necessary in practice. The probability of a cosmic ray causing a bit flip is far higher than the probability of key collision.

Benefits/disadvantages:
[+] Whenever one browser posts an atomic change, that change can be included into another browser without rekeying.
[+] Simplifies the Undo function across browsers that simultaneously edit the same project.
[-] Yet another one-way upgrade (as we had when transitioning to version 3.0 of the tools).
[-] DOM object id's and Raster files are longer, and more difficult to inspect and understand.

Note:
- A very good random number generator is necessary. Math.random() is insufficient, we must use crypto.getRandomValues().
- Currently, loadFromString contains elaborate code to renumber keys to prevent collisions. This will still be necessary: for backwards compatibility, and in cases where we need to duplicate on import.

Two browsers can simultaneously work on the same project. Do we need the feature of simultaneous editing at all? Can we drop it? If we drop it, how do we prevent browsers from accessing the same project?

The current implementation is clumsy, as the entire project is uploaded to the server, and pushed to fellow browsers who must do a full load-then-switch of the modified project.
It would be much more efficient to share atomic changes.
Because of network delays and interruption, we need to have a robust sync service, and queuing of possibly multiple actions. Note that some of the browsers may be offline.

A browser is not allowed to Undo action made by, and received from, other browsers.
A browser instance cannot know whether it is up to date, or whether there are still atomic actions queued and undelivered.
Consider the situation in which a browser receives some but not all actions, undoes the last of those, and then receives the remaining actions. The project will now be in a consistent state, unless the action is redone again.

Alternatively, we can give each atomic action a timestamp, and order them sequentially.
When a browser receives atomic actions from another instance they are merged into this sequential list.
Any actions applied at a later time than the ones received will be undone, then the received actions are performed, then the undone actions will be retried.
Any action that fails is ignored (silently or with an error message).
What to do when network delays or interruptions last for a long time? Different instances will then slowly diverge.
How do we ensure that instances have roughly the same clock?
Currently, share.php uses the server's clock only, not the browsers' clocks.
We can apply a correction (drift) to the local clock, based on the server's clock.


SHARED PROJECTS
By default, projects are stored locally only (private).
When a project is marked 'shared', it will also be stored remotely.
Remotely stored projects that are not also stored locally are called 'remote'.
The Library panel will show local (private and public) as well as remote projects.
Private projects will be grouped separately from shared projects (both local and remote).

Private projects must have a locally unique name. Public projects must have a group-wide unique name.
When a project is made public a unique name must be chosen, if necessary.
Projects have metadata: name, description, last saved timestamp, last saved by.
Browsers have an option for name of creator (Options panel). There is no check whether that name is unique. This is a feature: one person can use two browsers, and two people can work as a team.

Actions on private projects:
- activate: nothing special.
- details, name or description: nothing special.
- details, change to shared: name must not exist on server, user is prompted to rename first. Otherwise, project is saved. If saving fails,  a warning is shown and the project is marked as private (again).
- delete: no preconditions, no effect on server.
- export: no preconditions, no effect on server.
- merge: no preconditions. If the second project is remote, it will be fetched and merged, and become public.

Actions on shared project:
- activate: update if server version is more recent. If project has been removed from server, show warning and make private.
- details, name or description: new name must not exist locally or on the server, if so the name reverts to the old value. Otherwise, name and description are changed locally and on the server. If the project does not exist remotely, show warning and make local.
- details, change to private: no preconditions. The file will be removed from the server. It is not an error if the project does not exist remotely.
- delete: no preconditions, removed locally and from the server. It is not an error if the project does not exist remotely.
- export: no preconditions, no effect on server. Check if project is still on server, if not: show warning and make local.
- merge: no preconditions. If the second project is remote, it will be fetched and merged, and become public.

Actions on remote project:
- activate: name must not match with existing private project (if so, warn and stop), no effect on server. Project becomes public.
- details, name or description: new name must not exist locally or on the server, if so the name reverts to the old value. Otherwise, name and description are changed locally and on the server. If the project does not exist remotely, show warning and make local.
- details, change to private: no preconditions. The file will be removed from the server. It is not an error if the project does not exist remotely.
- delete: no preconditions, removed locally and from the server. It is not an error if the project does not exist remotely.
- export: no preconditions, no effect on server. Check if project is still on server, if not: show warning and make local.
- merge: no preconditions. If the second project is remote, it will be fetched and merged, and become public.

When (re)loading the tool:
- private projects: no action
- public projects: reload from server, if the server is newer
- remote project: nothing.
